package generate

import "strings"

//////////////////////////////////////////////////////////////////////////////

var rawSkippedFixture = strings.TrimSpace(`
func Test{{.StructName}}(t *testing.T) { {{range .TestCases}}
	t.Skip("('{{.StructName}}') Skipping test case: '{{.Name | sentence}}'") {{end}}
}
`)

//////////////////////////////////////////////////////////////////////////////

var rawTestFunction = strings.TrimSpace(`
func Test{{.StructName}}(t *testing.T) { {{if .FixtureTeardownName}}
	defer {{.FixtureTeardownName}}()
	{{end}}{{if .FixtureSetupName}}{{.FixtureSetupName}}()

{{end}}
	fixture := gunit.NewFixture(t)
	defer fixture.Finalize()

{{range .TestCases}}{{if .Skipped}}
	fixture.Skip("Skipping test case: '{{.Name | sentence}}'"){{else}}
	test{{.Index}} := &{{.StructName}}{Fixture: fixture}
	test{{.Index}}.RunTestCase__(test{{.Index}}.{{.Name}}, "{{.Name | sentence}}"){{end}}
{{else}}	fixture.Skip("Fixture '{{.StructName}}' has no test cases.")
{{end}}}

{{if .TestCases}}func (self *{{.StructName}}) RunTestCase__(test func(), description string) {
	self.T.Log(description){{if .TestTeardownName}}
	defer self.{{.TestTeardownName}}(){{end}}{{if .TestSetupName}}
	self.{{.TestSetupName}}(){{end}}
	test()
}
{{end}}{{/*if .TestCases*/}}`)

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

const header = `//////////////////////////////////////////////////////////////////////////////
// Generated Code ////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

package %s

import (
	"testing"

	"github.com/smartystreets/gunit"
)
`

const footer = `

func init() {
	checksums := %#v
	gunit.Validate(checksums)
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////// Generated Code //
///////////////////////////////////////////////////////////////////////////////
`

//////////////////////////////////////////////////////////////////////////////
